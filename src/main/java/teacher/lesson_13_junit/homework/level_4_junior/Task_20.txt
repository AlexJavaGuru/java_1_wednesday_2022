Генерация следующего поколения в игре Conway's Game of Life
(https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life).

Нужен ли нам отдельный класс для UI (User Interface)?
За что будет отвечать этот класс (какие обязанности будет выполнять)?
Почему стоит этот код вынести в отдельный класс и тем самым отделить от остальной системы?

Вспоминаем Single Responsibility Principle.

В программировании самый лучший класс это тот класс, который следует Single Responsibility Principle.
Одна ответственность = одна причина для внесения изменений = минимум возможных ошибок
= более качественный и устойчивый код.

Да нам в системе нужен UI (User Interface). По заданию он должен быть
на данный момент консольным. На первый взгляд кажется, что достаточно
где то в коде написать просто метод:
    void printFieldToConsole(boolean[][] field)
и дело сделано!

Задайте себе вопрос - код этого метода в будущем может поменяться?
По какой причине это может произойти? Какие изменения придётся внести
в код, что бы реализовать изменения?

Один из возможных сценариев - заказчик или вы сами выступающие в роли заказчика
захотите создать красивый интерфейс для вашей программы Game Of Life с отдельным
окном и классным цветным дизайном вместо консоли. Что для этого придётся сделать
в вашем приложении? Какие изменения ждут метод printFieldToConsole()?

Очевидно, что для создания красивого UI нужно будет, что то большее чем просто
один метод. Скорее всего придётся подключать отдельную библиотеку для
прорисовки элементов дизайна и писать намного больше кода. Очевидно, что для этого
придётся создавать отдельный класс иначе код реализующий UI будет сильно
переплетён с оставшейся частью системы.

Даже если красивый UI в будущем создавать не придётся, то могут потребоваться
изменения в консольном варианте UI. Для этого придётся искать метод printFieldToConsole(),
который будет находиться в одном из классов и менять его. Тоесть для внесения
изменений в UI придётся менять код другого класса. Это всегда плохо, так как
при любом изменении кода мы можем внести ошибку в данном случае в код не
относящийся к UI. Если код относящийся к UI будет находиться в отдельном классе,
то меняя его мы остаёмся в рамках этого класса и внести ошибку в другой код системы
будет не так то просто.

Если мы создадим для кода реализующего UI отдельный класс, то его будет просто
и легко найти в системе по названию. А так же у нас будет только одна причина
для внесения изменений в код этого класса. Код этого класса будет меняться
только тогда, когда нужно будет изменить UI! Это идеальная реализация
Single Responsibility Principle.

Поэтому изходя из всего выше описанного целесообразно вынести код для реализации
UI в отдельный класс. Назовём этот класс например GameOfLifeConsoleUI.

Какую же функциональность будет реализовывать класс GameOfLifeConsoleUI?
Показ поля на консоли! Для этого у класса GameOfLifeConsoleUI будет метод:
    public void show(boolean[][] field).