Вводим новую функциональность: анализ расходов.

После написания тестов вернёмся к классу FoodExpensesCalculator.

У нас есть код, у нас есть тесты - у нас есть всё, что бы заняться рефакторингом!

Рефакторинг - это улучшение программного кода без изменения его функциональности.

Улучшать код можно по разному, восновном это делается для улучшения читаемости
и понимания кода, а так же для упрощения поддержки кода в будущем.

Давайте попробуем улучшить читабельность нашего кода, а заодно
сделаем так, что бы комментарии оставленные нами в коде были больше не нужны.

Комментарии - это не рабочий код, они игнорируются компилятором и очень быстро устаревают.

Один из первых признаков плохого кода - это длинные методы!
Давайте попробуем уменьшить длину метода calculateExpensesAmount()
разбив его на более маленькие методы.


class FoodExpensesCalculator {

    public int calculateExpensesAmount(BankAccount bankAccount) {
        // 1. Берём все транзакции банковского аккаунта;
        Transaction[] transactions = bankAccount.getTransactions();

        // 2. Отбираем только WITHDRAWAL транзакции, так как они являются расходами;
        List<Transaction> withdrawalTransactions = new ArrayList<>();
        for (Transaction transaction : transactions) {
            if (transaction.isWithdrawal()) {
                withdrawalTransactions.add(transaction);
            }
        }

        // 3. Из WITHDRAWAL транзакций отбираем транзакции у которых в категории расходов указано FOOD;
        List<Transaction> withdrawalFoodTransactions = new ArrayList<>();
        for (Transaction transaction : withdrawalTransactions) {
            if (transaction.getExpenseCategory() == ExpenseCategory.FOOD) {
                withdrawalFoodTransactions.add(transaction);
            }
        }

        // 4. Проходим по всем отобранным транзакциям и суммируем потраченные деньги.
        int foodExpensesAmount = 0;
        for (Transaction transaction : withdrawalFoodTransactions) {
            foodExpensesAmount = foodExpensesAmount + transaction.getAmount();
        }

        return foodExpensesAmount;
    }

}

Разбейте метод calculateExpensesAmount() на более маленькие методы!